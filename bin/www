#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mposc-api:server');
var WebSockets = require('../utils/WebSockets.js');
var server = require('http').createServer(app);
var socketio = require('socket.io')(server);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Create socket connection
 */
function connection(client) {
  var users = [];
  // event fired when the chat room is disconnected
  client.on('disconnect', () => {
    console.log(this)
    users = users.filter((user) => user.socketId !== client.id)
})
  // add identity of user mapped to the socket id
  client.on('identity', (userId) => {
    users.push({
      socketId: client.id,
      userId: userId,
    })
  })
  // subscribe person to chat & other user as well
  client.on('subscribe', (room, otherUserId = '') => {
    subscribeOtherUser(room, otherUserId);
  client.join(room)
})
  // mute a chat room
  client.on('unsubscribe', (room) => {
    client.leave(room)
  })

  client.on('callUser', (data) => {
    let userSocket = users.find(
        (user) => user.userId === data.userToCall
)
  if (userSocket && userSocket.socketId)
    socketio.to(userSocket.socketId).emit('hey', {
      signal: data.signalData,
      from: data.from,
    })
})

  client.on('acceptCall', (data) => {
    let userSocket = users.find((user) => user.userId === data.to)
  if (userSocket && userSocket.socketId) {
    socketio.to(userSocket.socketId).emit('callAccepted', data.signal)
    console.log("Call Accepted", data.signal)
  }
})
}

function subscribeOtherUser(room, otherUserId) {
  const userSockets = users.filter((user) => user.userId === otherUserId)
  userSockets.map((userInfo) => {
    const socketConn = socketio.sockets.connected[userInfo.socketId]
    if (socketConn) {
      socketConn.join(room)
    }
  })
}

socketio.on('connection', connection);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
